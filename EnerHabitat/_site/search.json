[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ener-Habitat",
    "section": "",
    "text": "Ener-Habitat\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\n\n\n\n\nAnteriormente Ener-Habitat fue desarrollada con distintos leguajes conocidos, como: JavaScript, MySQL, Html y Jsp. Dicho sistema terminó fallando con el pasar del tiempo debido a su gran cantidad de usuarios que se registraban, al igual que se generó una saturación de información.\n\n\n\n\nActualmente se renovo el sistema con una interfaz grafica mejorada al igual que el rendimiento, sin necesidad de registrarse. Libre para cualquier usuario, utilizando diferentes herramientas para su desarrollo como Shiny para Python, Plotly para el diseno de las graficas.\n\n\n\n\n\n\nEmpezar"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "docs/index.html",
    "href": "docs/index.html",
    "title": "Desarrollo de Ener-Habitat",
    "section": "",
    "text": "Este sistema fue desarrollado con el sistema operativo Linux de Ubuntu 22.04.4, en conjunto con la herramienta de Shiny con un enfoque para Python para la elaboración de funciones y de la interfaz.\n \nBrevemente se describirá la herramienta que se utilizó:\n\n\nEsta herramienta es eficaz, reactiva y robusta, Shiny es de ejecución reactiva, dicha funcionalidad sirve para que los resultados se renderizen solo cuando cambian sus componentes ascendentes, capaz de admitir todo desde aplicaciones web simples a complejas (Foundation, Python, 2023).\nUna aplicación Shiny enfocada en Python es “una página web interactiva (ui) impulsada por una sesión de Python en vivo ejecutada por un servidor”, esto permite que los usuarios pueden manipular la interfaz de manera que el servidor actualice las pantallas del usuario mediante la ejecución de código Python, (CC BY SA Posit Software, 2024).",
    "crumbs": [
      "Desarrollo de Ener-Habitat"
    ]
  },
  {
    "objectID": "docs/index.html#qué-aprenderás",
    "href": "docs/index.html#qué-aprenderás",
    "title": "Bienvenida",
    "section": "",
    "text": "El curso está organizado por cuatro grandes temas o semanas y un proyecto final, que son:\n\nInstalación y prácticas avanzadas:\nExploración avanzada de datos\nPandas avanzado\nNuevas herramientas en la ciencia de datos\nProyecto final"
  },
  {
    "objectID": "docs/index.html#markdowny-a-continuación-se-mostraran-las-funciones-que-se-utilizaron-y-la-explicación-de-cada-una-de-ellas.",
    "href": "docs/index.html#markdowny-a-continuación-se-mostraran-las-funciones-que-se-utilizaron-y-la-explicación-de-cada-una-de-ellas.",
    "title": "Desarrollo de Ener-Habitat",
    "section": "",
    "text": "title: “observable plot” author: “Norah Jones” format: html: code-fold: true —",
    "crumbs": [
      "Desarrollo de Ener-Habitat"
    ]
  },
  {
    "objectID": "docs/index.html#seattle-precipitation-by-day-2012-to-2016",
    "href": "docs/index.html#seattle-precipitation-by-day-2012-to-2016",
    "title": "Desarrollo de Ener-Habitat",
    "section": "",
    "text": "```{ojs}\ndata = FileAttachment(\"seattle-weather.csv\")\n  .csv({typed: true})\n  \nPlot.plot({\n  width: 800, height: 500, padding: 0,\n  color: { scheme: \"blues\", type: \"sqrt\"},\n  y: { tickFormat: i =&gt; \"JFMAMJJASOND\"[i] },\n  marks: [\n    Plot.cell(data, Plot.group({fill: \"mean\"}, {\n      x: d =&gt; new Date(d.date).getDate(),\n      y: d =&gt; new Date(d.date).getMonth(),\n      fill: \"precipitation\", \n      inset: 0.5\n    }))\n  ]\n})\n```",
    "crumbs": [
      "Desarrollo de Ener-Habitat"
    ]
  },
  {
    "objectID": "docs/interfaz.html",
    "href": "docs/interfaz.html",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "A continuación explicará el desarrollo de la interfaz de Ener-Habitat:\nLa declaración de app_ui, sirve para definir la interfaz del usuario, donde se describirá la vista de la aplicación, es decir, los elementos interactivos (botones, gráficas, tablas, etc.) que estarán presentes y como estarán organizados.\n## Ejemplo para conocer el uso de app_ui\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_fluid(\"Hello Shiny!\")\n\ndef server(input, output, session):\n\napp = App(app_ui, server)\n\n\nUna vez, explicado el uso de app_ui en Shiny, se comenzará con el desarrollo de la interfaz, declarando una ui.page_sidebar, junto con un acordeón, para generar una barra lateral indicando el nombre del sistema en este caso “Ener-Habitat”, y para colocar en el primer acordeón una función que contendrá varios inputs para que el usuario seleccione cada condición con la cual se generará el gráfico de la simulación, dependiendo el tipo de sistema que desee realizar:\n## Parte de la interfaz, que manda a llamar la función \"left_controls\"\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.accordion(\n            ui.accordion_panel(\n                \"Cambios\",\n                ui.output_ui(\"left_controls\"),\n            ),\n        ),\n    )\n)        \n\n\n\nContinuando con el desarrollo de la interfaz, se declaró un segundo acordeón que contendrá otra sección de inputs, mostrado cada uno en la función “controls_top”, junto con un input selector, para seleccionar el tipo de sistema “Con capa homogénea” y/o “Sin capa homogénea” (la cual aún sigue en desarrollo). LLamando a una lista de diccionarios, junto con un input númerico el cual el usuario seleccionará el número de sistemas que desea realizar (como minímo 1, de 1 en 1, máximo 5), y por último, un nuevo acordeón que manda a llamar la función “controls_rigth”, junto con un botón que contará las simulaciones realizadas.\n## Parte de la interfaz, que manda a llamar la función \"controls_top\" & \"controls_rigth\"\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    \n    //Código anterior\n\n    ui.accordion(\n        ui.accordion_panel(\n            \"Selección\",\n            ui.output_ui(\"controls_top\"),\n                ui.input_select(  \n                    \"type\",  \n                    \"Tipo de sistema:\",  \n                    choices= list(type_sistem.keys()),  \n                ),\n        ),\n    ),\n    ui.input_numeric(\"sistemas\", \"Número de sistemas:\", value=1, min=1, max=5),  \n    ui.accordion(\n        ui.accordion_panel(\n            \"Datos\",\n            ui.output_ui(\"controls_rigth\")\n        )\n    ),\n    ui.input_action_button(\"update\", \"correr\"),\n),        \n\n\n\nPara comenzar con la parte de la interfaz, donde se visualizará un panel por cada sección de los gráficos, tablas, etc. Se declaró un ui.navset_card_underline, ejemplo: https://shiny.posit.co/py/api/express/express.ui.navset_card_underline.html#examples",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/index.html#shiny-para-python",
    "href": "docs/index.html#shiny-para-python",
    "title": "Desarrollo de Ener-Habitat",
    "section": "",
    "text": "Esta herramienta es eficaz, reactiva y robusta, Shiny es de ejecución reactiva, dicha funcionalidad sirve para que los resultados se renderizen solo cuando cambian sus componentes ascendentes, capaz de admitir todo desde aplicaciones web simples a complejas (Foundation, Python, 2023).\nUna aplicación Shiny enfocada en Python es “una página web interactiva (ui) impulsada por una sesión de Python en vivo ejecutada por un servidor”, esto permite que los usuarios pueden manipular la interfaz de manera que el servidor actualice las pantallas del usuario mediante la ejecución de código Python, (CC BY SA Posit Software, 2024).",
    "crumbs": [
      "Desarrollo de Ener-Habitat"
    ]
  },
  {
    "objectID": "docs/interfaz.html#fu",
    "href": "docs/interfaz.html#fu",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "La declaración de app_ui, sirve para definir la interfaz del usuario, donde se describirá la vista de la aplicación, es decir, los elementos interactivos (botones, gráficas, tablas, etc.) que estarán presentes y como estarán organizados.\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_fluid(\"Hello Shiny!\")\n\ndef server(input, output, session):\n\napp = App(app_ui, server)\nUna vez, explicado el uso de app_ui en Shiny, se comenzará con el desarrollo de la interfaz, declarando una ui.page_sidebar, junto con un acordeón, para generar una barra lateral indicando el nombre del sistema en este caso “Ener-Habitat”, y para colocar en el primer acordeón una función que contendrá varios inputs para que el usuario seleccione cada condición con la cual se generará el gráfico de la simulación, dependiendo el tipo de sistema que desee realizar:\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.accordion(\n            ui.accordion_panel(\n                \"Cambios\",\n                ui.output_ui(\"left_controls\"),\n            ),\n        ),\n    )\n)        \n\ndef server(input, output, session):\n\napp = App(app_ui, server)",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#función-de-app_ui",
    "href": "docs/interfaz.html#función-de-app_ui",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "La declaración de app_ui, sirve para definir la interfaz del usuario, donde se describirá la vista de la aplicación, es decir, los elementos interactivos (botones, gráficas, tablas, etc.) que estarán presentes y como estarán organizados.\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_fluid(\"Hello Shiny!\")\n\ndef server(input, output, session):\n\napp = App(app_ui, server)\nUna vez, explicado el uso de app_ui en Shiny, se comenzará con el desarrollo de la interfaz, declarando una ui.page_sidebar, junto con un acordeón, para generar una barra lateral indicando el nombre del sistema en este caso “Ener-Habitat”, y para colocar en el primer acordeón una función que contendrá varios inputs para que el usuario seleccione cada condición con la cual se generará el gráfico de la simulación, dependiendo el tipo de sistema que desee realizar:\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.accordion(\n            ui.accordion_panel(\n                \"Cambios\",\n                ui.output_ui(\"left_controls\"),\n            ),\n        ),\n    )\n)        \n\ndef server(input, output, session):\n\napp = App(app_ui, server)",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#inic",
    "href": "docs/interfaz.html#inic",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Una vez, explicado el uso de app_ui en Shiny, se comenzará con el desarrollo de la interfaz, declarando una ui.page_sidebar, junto con un acordeón, para generar una barra lateral indicando el nombre del sistema en este caso “Ener-Habitat”, y para colocar en el primer acordeón una función que contendrá varios inputs para que el usuario seleccione cada condición con la cual se generará el gráfico de la simulación, dependiendo el tipo de sistema que desee realizar:\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.accordion(\n            ui.accordion_panel(\n                \"Cambios\",\n                ui.output_ui(\"left_controls\"),\n            ),\n        ),\n    )\n)        \n\ndef server(input, output, session):\n\napp = App(app_ui, server)",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#inicio-c",
    "href": "docs/interfaz.html#inicio-c",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Una vez, explicado el uso de app_ui en Shiny, se comenzará con el desarrollo de la interfaz, declarando una ui.page_sidebar, junto con un acordeón, para generar una barra lateral indicando el nombre del sistema en este caso “Ener-Habitat”, y para colocar en el primer acordeón una función que contendrá varios inputs para que el usuario seleccione cada condición con la cual se generará el gráfico de la simulación, dependiendo el tipo de sistema que desee realizar:\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.accordion(\n            ui.accordion_panel(\n                \"Cambios\",\n                ui.output_ui(\"left_controls\"),\n            ),\n        ),\n    )\n)        \n\ndef server(input, output, session):\n\napp = App(app_ui, server)",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#inicio-con-la-página",
    "href": "docs/interfaz.html#inicio-con-la-página",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Una vez, explicado el uso de app_ui en Shiny, se comenzará con el desarrollo de la interfaz, declarando una ui.page_sidebar, junto con un acordeón, para generar una barra lateral indicando el nombre del sistema en este caso “Ener-Habitat”, y para colocar en el primer acordeón una función que contendrá varios inputs para que el usuario seleccione cada condición con la cual se generará el gráfico de la simulación, dependiendo el tipo de sistema que desee realizar:\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.accordion(\n            ui.accordion_panel(\n                \"Cambios\",\n                ui.output_ui(\"left_controls\"),\n            ),\n        ),\n    )\n)        \n\ndef server(input, output, session):\n\napp = App(app_ui, server)",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#section",
    "href": "docs/interfaz.html#section",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Una vez, explicado el uso de app_ui en Shiny, se comenzará con el desarrollo de la interfaz, declarando una ui.page_sidebar, junto con un acordeón, para generar una barra lateral indicando el nombre del sistema en este caso “Ener-Habitat”, y para colocar en el primer acordeón una función que contendrá varios inputs para que el usuario seleccione cada condición con la cual se generará el gráfico de la simulación, dependiendo el tipo de sistema que desee realizar:\n\n## Ejemplo para conocer el uso de app_ui\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.accordion(\n            ui.accordion_panel(\n                \"Cambios\",\n                ui.output_ui(\"left_controls\"),\n            ),\n        ),\n    )\n)",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#parte-1",
    "href": "docs/interfaz.html#parte-1",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Una vez, explicado el uso de app_ui en Shiny, se comenzará con el desarrollo de la interfaz, declarando una ui.page_sidebar, junto con un acordeón, para generar una barra lateral indicando el nombre del sistema en este caso “Ener-Habitat”, y para colocar en el primer acordeón una función que contendrá varios inputs para que el usuario seleccione cada condición con la cual se generará el gráfico de la simulación, dependiendo el tipo de sistema que desee realizar:\n## Parte de la interfaz, que manda a llamar la función \"left_controls\"\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.accordion(\n            ui.accordion_panel(\n                \"Cambios\",\n                ui.output_ui(\"left_controls\"),\n            ),\n        ),\n    )\n)",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#parte-2",
    "href": "docs/interfaz.html#parte-2",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Continuando con el desarrollo de la interfaz, se declaró un segundo acordeón que contendrá otra sección de inputs, mostrado cada uno en la función “controls_top”, junto con un input selector, para seleccionar el tipo de sistema “Con capa homogénea” y/o “Sin capa homogénea” (la cual aún sigue en desarrollo). LLamando a una lista de diccionarios, junto con un input númerico el cual el usuario seleccionará el número de sistemas que desea realizar (como minímo 1, de 1 en 1, máximo 5), y por último, un nuevo acordeón que manda a llamar la función “controls_rigth”, junto con un botón que contará las simulaciones realizadas.\n## Parte de la interfaz, que manda a llamar la función \"controls_top\" & \"controls_rigth\"\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    \n    //Código anterior\n\n    ui.accordion(\n        ui.accordion_panel(\n            \"Selección\",\n            ui.output_ui(\"controls_top\"),\n                ui.input_select(  \n                    \"type\",  \n                    \"Tipo de sistema:\",  \n                    choices= list(type_sistem.keys()),  \n                ),\n        ),\n    ),\n    ui.input_numeric(\"sistemas\", \"Número de sistemas:\", value=1, min=1, max=5),  \n    ui.accordion(\n        ui.accordion_panel(\n            \"Datos\",\n            ui.output_ui(\"controls_rigth\")\n        )\n    ),\n    ui.input_action_button(\"update\", \"correr\"),\n),",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#parte-1--",
    "href": "docs/interfaz.html#parte-1--",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Una vez, explicado el uso de app_ui en Shiny, se comenzará con el desarrollo de la interfaz, declarando una ui.page_sidebar, junto con un acordeón, para generar una barra lateral indicando el nombre del sistema en este caso “Ener-Habitat”, y para colocar en el primer acordeón una función que contendrá varios inputs para que el usuario seleccione cada condición con la cual se generará el gráfico de la simulación, dependiendo el tipo de sistema que desee realizar:\nfrom Shiny import App, ui, render, reactive \n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.accordion(\n            ui.accordion_panel(\n                \"Cambios\",\n                ui.output_ui(\"left_controls\"),\n            ),\n        ),\n    )\n)",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#parte-3",
    "href": "docs/interfaz.html#parte-3",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Para comenzar con la parte de la interfaz, donde se visualizará un panel por cada sección de los gráficos, tablas, etc. Se declaró un ui.navset_card_underline, ejemplo: https://shiny.posit.co/py/api/express/express.ui.navset_card_underline.html#examples",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#explicación-de",
    "href": "docs/interfaz.html#explicación-de",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Para comenzar con la parte de la interfaz, donde se visualizará cada sección de los gráficos, tablas, etc. Se declaró un ui.navset_card_underline,",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#explicación-del-uso-de",
    "href": "docs/interfaz.html#explicación-del-uso-de",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Para comenzar con la parte de la interfaz, donde se visualizará cada sección de los gráficos, tablas, etc. Se declaró un ui.navset_card_underline,",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  },
  {
    "objectID": "docs/interfaz.html#explicación-del-uso-de-ui.navser_card_underline",
    "href": "docs/interfaz.html#explicación-del-uso-de-ui.navser_card_underline",
    "title": "Desarrollo de la Interfaz",
    "section": "",
    "text": "Para comenzar con la parte de la interfaz, donde se visualizará cada sección de los gráficos, tablas, etc. Se declaró un ui.navset_card_underline, ejemplo:",
    "crumbs": [
      "Desarrollo de interfaz"
    ]
  }
]